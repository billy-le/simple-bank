// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email
)
VALUES ($1, $2, $3, $4)
RETURNING username, full_name, email, created_at, password_changed_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

type CreateUserRow struct {
	Username          string    `json:"username"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	CreatedAt         time.Time `json:"created_at"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, full_name, email, created_at, password_changed_at FROM users
WHERE username = $1
LIMIT 1
`

type GetUserRow struct {
	Username          string    `json:"username"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	CreatedAt         time.Time `json:"created_at"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}
